# This file must have the bash variable assignment syntax

#########################
# General configuration #
###############################################################################
#
# Database type ("mysql" or "Pg")
DB_TYPE="Pg"
# Configuration for module: server, user, api

# DataBase hostname
DB_HOSTNAME="127.0.0.1"
# Configuration for module: server, user, api

# DataBase port
DB_PORT="5432"
# Configuration for module: server, user, api

# Database base name
DB_BASE_NAME="oar"
# Configuration for module: server, user, api

# DataBase user name
DB_BASE_LOGIN="oar"
# Configuration for module: server, user, api

# DataBase user password
DB_BASE_PASSWD=""
# Configuration for module: server, user, api

# DataBase read only user name
DB_BASE_LOGIN_RO="oar_ro"
# Configuration for module: server, user, api

# DataBase read only user password
DB_BASE_PASSWD_RO=""
# Configuration for module: server, user, api

# OAR server hostname
SERVER_HOSTNAME="localhost"
# Configuration for module: server, user, api

# OAR server port
SERVER_PORT="6666"
# Configuration for module: server, user, api

# when the user does not specify a -l option then oar use this
OARSUB_DEFAULT_RESOURCES="/resource_id=1"
# Configuration for module: user, api

# which real resource must be used when using the "nodes" keyword ?
OARSUB_NODES_RESOURCES="network_address"
# Configuration for module: user, api

# force use of job key even if --use-job-key or -k is not set.
OARSUB_FORCE_JOB_KEY="no"
# Configuration for module: user, api

# Enable storage of admission rules outputs in database, as events.
# Two separate events will be created for STDOUT and STDERR:
#  - ADM_RULES_MSG_OUT
#  - ADM_RULES_MSG_ERR
# An event will be created only if there was an output on the FD.
# Default is no
OARSUB_STORE_ADM_RULES_OUTPUTS="no"
# Configuration for module: user

# OAR log level: 3(debug+warnings+errors), 2(warnings+errors), 1(errors)
LOG_LEVEL="2"
# Configuration for module: server

# Log categories to display in the log file.
# Ex: LOG_CATEGORIES="scheduler,main,energy"
# if LOG_CATEGORIES="all" every category will be logged.
LOG_CATEGORIES="all"
# Configuration for module: server

# Log format to use in the log file.
# E.g. "type|timestamp|module/session|jobid|message" where:
# - type is 'E' for error, 'W' for warning, 'I' for info, 'D' for debug
# - timestamp is yyyy-mm-ddThh:mm:ss.ms
# - module is the name of the OAR module that writes the log line
# - session is the pid of the OAR module that write the log line (= session id)
# - jobid is the job id of the job which the log line is about, or "" if no job id is relevant for the log line
# - message is the log message
# The log format string must be composed of 6 '%s', but can use any characters around them
# Default is "%s|%s|%s/%s|%s|%s" 
#LOG_FORMAT="%s|%s|%s/%s|%s|%s"
# Configuration for module: server

# If you want to debug oarexec on nodes then affect 1 (only effective if DETACH_JOB_FROM_SERVER = 1)
OAREXEC_DEBUG_MODE="0"
# Configuration for module: server

# oarexec default temporary directory
# This value MUST be the same in all oar.conf on all nodes of the cluster
OAR_RUNTIME_DIRECTORY="%%OARHOMEDIR%%"
# Configuration for module: server, user, api, node

# OAR log file
LOG_FILE="%%LOGDIR%%/oar.log"
# Configuration for module: server

# Specify where we are connected with a job of the deploy type
DEPLOY_HOSTNAME="127.0.0.1"
# Configuration for module: server, user, api

# Specify where we are connected with a job of the cosystem type
COSYSTEM_HOSTNAME="127.0.0.1"
# Configuration for module: server, user, api

# Specify what system to use for the execution on the deploy and cosystem frontends
# Possible values are:
#   none: just run in a bash shell (default)
#   systemd-run: use systemd-run
# systemd-run executes the job processes in user slices managed by systemd, which
# could easily allow to set resource limits through cgroups.
#DEPLOY_COSYSTEM_JOB_EXEC_SYSTEM="systemd-run"
# Configuration for module: server, user, api

# Specify the database field to use to fill the file on the first node of the
# job in $OAR_NODE_FILE (default is 'network_address'). Only resources with
# type=default are displayed in this file.
#NODE_FILE_DB_FIELD="network_address"
# Configuration for module: server

# Specify the database field that will be considered to fill the node file used
# by the user on the first node of the job. for each different value of this
# field then OAR will put 1 line in the node file (default: resource_id).
#NODE_FILE_DB_FIELD_DISTINCT_VALUES="resource_id"
# Configuration for module: server

# If you want to free a process per job on the server you can change this tag
# into 1 (you must enable all nodes to connect to SERVER_PORT on the
# SERVER_HOSTNAME)
DETACH_JOB_FROM_SERVER="1"
# Configuration for module: server

# MAX_CONCURRENT_JOBS_STARTING_OR_TERMINATING is the maximum number of jobs
# treated simultaneously (default is 25).
# This is the maximum number of bipbip processes launched at a time
#MAX_CONCURRENT_JOBS_STARTING_OR_TERMINATING=25
# Configuration for module: server

# Command to use to connect to other nodes (default is "ssh" in the PATH)
OPENSSH_CMD="/usr/bin/ssh -p 6667 -e none"
# Configuration for module: server, user, api, node

# Set the timeout value for each ssh connection (default is 120)
#OAR_SSH_CONNECTION_TIMEOUT="200"
# Configuration for module: server, user, api, node

# When a oardel is requested on a the job then OAR will try to kill it and if
# nothing respond in JOBDEL_WALLTIME seconds then the job is EXTERMINATED and
# the resources turned into the Suspected state (default is 300s)
#JOBDEL_WALLTIME="300"
# Configuration for module: server

# If you have installed taktuk and want to use it to manage remote
# admnistration commands then give the full command path
# (with your options except "-m" and "-o").
# You don t also have to give any taktuk command.
# (taktuk version must be >= 3.6)
#TAKTUK_CMD="/usr/bin/taktuk -t 30 -s"
# Configuration for module: server

# Change the meta scheduler in use.
#META_SCHED_CMD="oar_meta_sched"
# Configuration for module: server

# Storable recursion limit
# The use of Perl Storable::dclone for job resource lookups may be limited, so that it avoids
# segmentation faults, but raise an error "Max. recursion depth with nested structures exceeded".
# The value must be tuned with regard to the size of the resource table and to the frontend and
# server memory size. Default is -1, no limit.
# STORABLE_RECURSION_LIMIT = -1
# Configuration for module: server

###############################################################################

########################################################################
# Pingchecker options:                                                 #
# How to check if the nodes have a good health or not. This choice is  #
# directly linked to the Suspected state of the resources.             #
# By default OAR uses only "ping". it requests no configuration but it #
# is not accurate about the state of the nodes and it is slow          #
###############################################################################
#
# Set the frequency for checking Alive and Suspected resources (0 means never)
FINAUD_FREQUENCY="300"
# Configuration for module: server

# To disable the suspected nodes repair in finaud (nodes comes back), set the following to 'yes'
#DISABLE_SUSPECTED_NODES_REPAIR='no'
# Configuration for module: server

# Set time after which Suspected resources become Dead (default is 0 and it
# means never)
#DEAD_SWITCH_TIME="600"
# Configuration for module: server

# Set to yes if you want to check the nodes that runs jobs. (no is the default value)
#CHECK_NODES_WITH_RUNNING_JOB='no'
# Configuration for module: server

# Set to yes if you want to check the aliveness of nodes just after the end of
# each jobs.
#ACTIVATE_PINGCHECKER_AT_JOB_END="no"
# Configuration for module: server

# Uncomment only one of the following PINGCHECKER configuration

# sentinelle.pl
# If you want to use sentinelle.pl then you must use this tag.
# (sentinelle.pl is like a "for" of ssh but it adds timeout and window to
# avoid overloading the server)
# (sentinelle.pl is provided with OAR in the install directory)
PINGCHECKER_SENTINELLE_SCRIPT_COMMAND="%%OARDIR%%/sentinelle.pl -t 30 -w 20"
# Configuration for module: server

# Taktuk
# taktuk may be used to check aliveness of nodes.
# Give the arguments of the taktuk command WITHOUT format outputs
# (DO NOT use "-o" option).
# See TAKTUK_CMD tag in this file to specify the path of the taktuk command
#PINGCHECKER_TAKTUK_ARG_COMMAND="broadcast exec timeout 5 kill 9 [ true ]"
#PINGCHECKER_TAKTUK_ARG_COMMAND="broadcast exec timeout 5 kill 9 [ oarnodecheckquery ]"
#PINGCHECKER_TAKTUK_ARG_COMMAND="broadcast exec timeout 5 kill 9 [ /path/on/nodes/to/my/check/script.sh ]"
# Configuration for module: server

# fping
# fping may be used instead of ping to check aliveness of nodes.
# uncomment next line to use fping. Give the complete command path.
#PINGCHECKER_FPING_COMMAND="/usr/bin/fping -q"
# Configuration for module: server

# nmap
# nmap may be used instead of ping to check aliveness of nodes.
# uncomment next line to use nmap. Give the complete command path.
# It will test to connect on the ssh port (22)
#PINGCHECKER_NMAP_COMMAND="/usr/bin/nmap -p 22 -n -T5"
# Configuration for module: server

# GENERIC command
# a specific script may be used instead of ping to check aliveness of nodes.
# uncomment next line and give the complete command path and its arguments.
# The script must return bad nodes on STDERR (1 line for a bad node and it must
# have exactly the same name that OAR has given in argument of the command)
#PINGCHECKER_GENERIC_COMMAND="/path/to/command arg1 arg2"
# Configuration for module: server

###############################################################################

######################
# Mail configuration #
###############################################################################
#
# OAR information may be notified by email to the administror
# set accordingly to your configuration and uncomment the next lines to
# activate the feature.
# (If this tag is right configured then users can use "--notify" option of oarsub
# to receive mails about their jobs)
#MAIL_SMTP_SERVER="smtp.serveur.com"
# Configuration for module: server

# You can specify several recipients with a comma between each email address
#MAIL_RECIPIENT="user@domain.com"
#MAIL_SENDER="oar@domain.com"
# Configuration for module: server

# E-mail's subject sent to users contains by default the (short) hostname of
# the OAR server. It can not be enough to identify correctly which server was
# the notification's source. The instance name can be used to change that.
#INSTANCE_NAME="My OAR instance"
# Configuration for module: server

###############################################################################

###########
# Scripts #
###############################################################################
#
# Set the timeout for the prologue and epilogue execution on computing nodes
#PROLOGUE_EPILOGUE_TIMEOUT="60"
# Configuration for module: server

# Files to execute before and after each job on the first computing node
# (by default nothing is executed)
#PROLOGUE_EXEC_FILE="/path/to/prog"
#EPILOGUE_EXEC_FILE="/path/to/prog"
# Configuration for module: server

# Set the timeout for the prologue and epilogue execution on the OAR server
#SERVER_PROLOGUE_EPILOGUE_TIMEOUT="60"
# Configuration for module: server

# Files to execute before and after each job on the OAR server (by default
# nothing is executed)
#SERVER_PROLOGUE_EXEC_FILE="/path/to/prog"
#SERVER_EPILOGUE_EXEC_FILE="/path/to/prog"
# Configuration for module: server

# File to execute as root on the head node of a job before opening the
# interactive shell for oarsub -I or oarsub -C <jobid>, allowing alter the
# processes created for running the shell of the user.
# Arguments are: PIDs:JOB_USER:JOB_ID:JOB_NAME:JOB_PROJECT:JOB_WALLTIME
# where PIDs is a comma separated list of the PIDs of the involved processes.
# Can be used to change the cgroups of the processes if not taken care of by the
# job resource manager (e.g. on deploy and cosystem frontend).
#INTERACTIVE_JOB_HOOK_EXEC_FILE="/path/to/prog"
# Configuration for module: user, api

# File to execute as root on the head node of a job before running the script of
# of a passive job, allowing to alter the processes created for the user.
# Arguments are: PIDs:JOB_USER:JOB_ID:JOB_NAME:JOB_PROJECT:JOB_WALLTIME
# Where PIDs is a comma separated list of the PIDs of the involved processes.
# Can be used to change the cgroups of processes if not taken care of by the
# job resource manager (e.g. on deploy and cosystem frontend).
#PASSIVE_JOB_HOOK_EXEC_FILE="/path/to/prog"
# Configuration for module: server

# File to execute as oar on the frontend where a user runs a oarsub command to
# create an advance reservation job. It is executed after the scheduler gave
# "OK" or "KO" for validation, so that additional actions can be taken.
# Arguments are the JOBID and the scheduler's answer (1 when "OK" or
# 0 when "KO")
#ADVANCE_RESERVATION_VALIDATION_HOOK_EXEC_FILE="/path/to/prog"
# Configuration for module: user, api

# File to execute just after a group of resources has been supected. It may 
# be used to trigger automatic actions to heal the resources. The script is 
# started with the list of resources put in its STDIN: resource_id followed
# by a space and the network_address (one line per resource)
#SUSPECTED_HEALING_EXEC_FILE="/path/to/prog"
#SUSPECTED_HEALING_TIMEOUT="10"
# Configuration for module: server

########################
# Scheduler parameters #
###############################################################################
#
# Maximum of seconds used by a scheduler
SCHEDULER_TIMEOUT="30"
# Configuration for module: server

# Number of processes to use when performing scheduling calculations
# (default is 1)
SCHEDULER_NB_PROCESSES=1
# Configuration for module: server

# Enable or disable the early launch of job in the schedulers
# Schedulers can notify the meta scheduler of a new job to launch while the scheduling
# default is "yes"
#SCHEDULER_LAUNCHER_OPTIMIZATION="yes"
# Configuration for module: server

# Time to add between each jobs (for example: time for administration tasks or
# time to let computers to reboot)
# minimum time is 1 second
# default time is 60 seconds
SCHEDULER_JOB_SECURITY_TIME="60"
# Configuration for module: server

# Number of seconds before the start of an advance reservation, which besteffort
# jobs must be killed at (in order to let time to get nodes back and healthy 
# for the advance reservation). Default is 0 seconds.
# If SCHEDULER_BESTEFFORT_KILL_DURATION_BEFORE_RESERVATION < SCHEDULER_JOB_SECURITY_TIME
# then SCHEDULER_JOB_SECURITY_TIME is used instead.
#SCHEDULER_BESTEFFORT_KILL_DURATION_BEFORE_RESERVATION=0
# Configuration for module: server

# Minimum time in seconds that can be considered like a hole where a job could
# be scheduled in (if you have performance problems, you can try to increase
# this)
SCHEDULER_GANTT_HOLE_MINIMUM_TIME="300"
# Configuration for module: server

# Resources order for the allocation to jobs (SQL ORDER syntax)
# - scheduler_priority gives priority to resources with no or the smaller
#   besteffort job (see SCHEDULER_PRIORITY_HIERARCHY_ORDER)
# - state_num gives priority to alive, then absent, then suspected, then dead
#   resources
# - available_up to gives priority to absent resources that will be available
#   for the longer time
# - suspended_jobs gives priority to resources with no suspended jobs (oarhold)
SCHEDULER_RESOURCE_ORDER="scheduler_priority ASC, state_num ASC, available_upto DESC, suspended_jobs ASC, network_address ASC, resource_id ASC"
# Configuration for module: server

# Dedicated order for advance reservations (scheduler_priority, state_num,
# available_upto and suspended_jobs are not relevant for decisions in a far
# future
SCHEDULER_RESOURCE_ORDER_ADV_RESERVATIONS="network_address ASC, resource_id ASC"
# Configuration for module: server

# Threshold in seconds defining the near future: Advance reservations starting
# in the near future use SCHEDULER_RESOURCE_ORDER. Otherwise, they use
# SCHEDULER_RESOURCE_ORDER_ADV_RESERVATIONS (see above)
# Default is 300 seconds
# SCHEDULER_RESOURCE_ORDER_ADV_RESERVATIONS_THRESHOLD="300"
# Configuration for module: server

# If next line is uncommented then OAR will automatically update the value of
# "scheduler_priority" field corresponding to the besteffort jobs.
# The syntax is field names separated by "/". The value affected to
# "scheduler_priority" depends of the position of the field name.
SCHEDULER_PRIORITY_HIERARCHY_ORDER="network_address/resource_id"
# Configuration for module: server

# Log scheduler priority changes to the resource_logs table
# Useful for debug only, Can be displayed with drawgantt-svg with
# "scheduler_priority" set a query argument)
# LOG_SCHEDULER_PRIORITY_CHANGES="no"
# Configuration for module: server

# You can specify a type of resources that will be always assigned for each job
# (for exemple: enable all jobs to be able to log on the cluster frontales)
# For more information, see the FAQ
#SCHEDULER_RESOURCES_ALWAYS_ASSIGNED_TYPE="frontal"
# Configuration for module: server

# This says to the scheduler to treate resources of these types, where there is
# a suspended job, like free ones. So some other jobs can be scheduled on these
# resources. (list resource types separate with spaces; Default value is
# nothing so no other job can be scheduled on suspended job resources)
#SCHEDULER_AVAILABLE_SUSPENDED_RESOURCE_TYPE="default licence VLAN"
SCHEDULER_AVAILABLE_SUSPENDED_RESOURCE_TYPE="default"
# Configuration for module: server

# This value is a minimun delay in seconds between two scheduler runs.
# In other words: the scheduler will only be launched if its last call is at
# least 5s old.  This lets other OAR modules have more time to run.
# Warning: this delay will impact the validation of the advance reservations.
# Default value is 5s.
#SCHEDULER_MIN_TIME_BETWEEN_2_CALLS=5
# Configuration for module: server

# For a debug purpose, scheduler decisions can be logged into the database
# Uncomment the next line in order to activate the logging mechanism
#SCHEDULER_LOG_DECISIONS="yes"
# Configuration for module: server

# Time to wait when a reservation has not got all resources that it has reserved
# (some resources may have become Suspected or Absent since the job submission)
# before to launch the job on the remaining resources (default is 300s)
#RESERVATION_WAITING_RESOURCES_TIMEOUT="300"
# Configuration for module: server

# Set the granularity of the OAR accounting feature (in seconds)
# Used by the oaraccounting command and the
# oar_sched_gantt_with_timesharing_and_fairsharing* to calculate the timesharing
# policy. Default is 1 day (86400s)
#ACCOUNTING_WINDOW="86400"
# Configuration for module: server

###############################################################
# Parameters available if you are using the                   #
# oar_sched_gantt_with_timesharing_and_fairsharing* scheduler #
###############################################################################
#
# Specify the number of job to take care at each time
# Default is 30
SCHEDULER_FAIRSHARING_MAX_JOB_PER_USER=30
# Configuration for module: server

# Number of seconds to consider for the fairsharing
# Default is 30 days
#SCHEDULER_FAIRSHARING_WINDOW_SIZE=2592000
# Configuration for module: server

# Specify the target percentages for project names (0 if not specified)
# /!\ the syntax is a perl hash table definition with project names as keys
# AND EVERYTHING MUST BE ON THE SAME LINE
#SCHEDULER_FAIRSHARING_PROJECT_TARGETS="{ first => 75, default => 25 }"
# Configuration for module: server

# Specify the target percentages for users (0 if not specified)
# /!\ the syntax is a perl hash table definition with project names as keys
# AND EVERYTHING MUST BE ON THE SAME LINE
#SCHEDULER_FAIRSHARING_USER_TARGETS="{ toto => 75, titi => 10, tutu => 15 }"
# Configuration for module: server

# Weight given to each criteria
# By default the job project name is not taken in account
#SCHEDULER_FAIRSHARING_COEF_PROJECT=0
# Configuration for module: server

# By default, effective job duration counts twice than the asked one ("asked" =
# walltime given by the user )
#SCHEDULER_FAIRSHARING_COEF_USER=2
#SCHEDULER_FAIRSHARING_COEF_USER_ASK=1
# Configuration for module: server

# Kill inner jobs when their container is killed
# Default: no
#KILL_INNER_JOBS_WITH_CONTAINER="no"
# Configuration for module: server

##############################################

###############################################################
# TOKEN feature                                               #
# Parameters available if you are using the                   #
# oar_sched_gantt_with_timesharing_and_fairsharing scheduler* #
###############################################################################
#
# With this token feature you are able to filter which jobs can be scheduled
# depending on outside resources (like licence server for some proprietary
# softwares)
# So the users can do:
#   oarsub -l nodes=2 -t token:fluent=12 ./script.sh
# This job will be launched only if the script corresponding to the "fluent"
# token returns a value greater or equal than 12.
# You can use several "-t token:..." arguments (all token constraints must be
# ok)

# Specify the scripts to use for each token
# The scripts MUST print only 1 line with a number
#SCHEDULER_TOKEN_SCRIPTS="{ fluent => '/usr/local/bin/check_fluent.sh arg1 arg2', soft2 => '/usr/local/bin/check_soft2.sh arg1' }"
# Configuration for module: server

###############################################################################

###########################################################################
# WALLTIME CHANGE                                                         #
# Allow a user to request a change to the walltime of a job. Change can   #
# be an increase or a decrease. Increase is basically only granted if it  #
# does not conflict with the next jobs.                                   #
###############################################################################
#
# Activation of the feature, set to "yes" to activate (global setting, cannot be used per queue)
# Default is "no", disabled
#WALLTIME_CHANGE_ENABLED="no"
# Configuration for module: server, user, api

# Walltime change maximum allowed increase
# -1 means that the walltime increase is not limited
#  0 means that the walltime increase is allowed for oar and root only (with no limit)
# >0 sets the maximum increase of walltime users can request, in seconds
# If the value is in the ]0,1[ range, the actual value will be computed as that ratio of the walltime of the job
# Default is 0
#WALLTIME_MAX_INCREASE=0
# Configuration for module: server, user, api

# Set the minimum walltime of jobs for which change can be requested
# Default is 0, i.e. no minimum walltime
#WALLTIME_MIN_FOR_CHANGE=0
# Configuration for module: server, user, api

# Disallow walltime reduction
# Default is "no", reduction is allowed
#WALLTIME_REDUCTION_DISALLOWED="no"
# Configuration for module: server, user, api

# Set walltime change apply time: postpone the trial/application of the requested change to the given value in second before the predicted end of the job
# If the value is in the ]0,1[ range, the actual value will be computed as that ratio of the walltime of the job
# Default is 0, i.e. not postponed
# NB: negative changes are applied at once
#WALLTIME_CHANGE_APPLY_TIME=0
# Configuration for module: server, user, api

# Set an increment so that walltime change if added gradually
# If the value is in the ]0,1[ range, the actual value will be computed as that ratio of the walltime of the job
# Default is 0, i.e. extratime is not gradual
# NB: negative changes are applied at once
#WALLTIME_INCREMENT=0

# List users (* for all) for which walltime change can be forced to apply at once (force no wait / no increment)
# Default is "", i.e. only root and the oar user are allowed
#WALLTIME_ALLOWED_USERS_TO_FORCE=""

# List users (* for all) for which walltime change can delay the next batch jobs (i.e. only advance reservations cannot be moved)
# Default is "", i.e. only root and the oar user are allowed
#WALLTIME_ALLOWED_USERS_TO_DELAY_JOBS=""

# The last 7 settings can also be provided per queue, using the Perl hash syntax with the queue names as the keys.
# Not defined queues get the value associated to the _ key, or if not defined either, the default value of the setting (see above)
# e.g.:
# - Allow walltime increase requests for up to 2 hours for the default queue only (0 for others):
#WALLTIME_MAX_INCREASE="{default => 7200}"
# - Allow any user to force the walltime change of a job in all but the besteffort queue:
#WALLTIME_ALLOWED_USERS_TO_FORCE="{_ => '*', besteffort => ''}"

# Configure the default timeout if not specified by the user using the --timeout option,
# after which a walltime change request that is not yet accepted by the scheduler will be cancelled.
# Setting a value of 0 disables the default timeout.
# Default is 0 (disabled)
#WALLTIME_CHANGE_TIMEOUT="0"

###########################################################################
# ENERGY SAVING                                                           #
# (Management of automatic wake-up and shut-down of the nodes when they   #
# are not used)                                                           #
# You have to set up the "available_upto" property of your resources:     #
#  available_upto=0           : to disable the wake-up and shutdown       #
#  available_upto=1           : to disable the wake-up (but not the halt) #
#  available_upto=2147483647  : to disable the halt (but not the wake-up) #
#  available_upto=2147483646  : to enable wake-up/halt forever            #
#  available_upto=<timestamp> : to enable the halt, and the wake-up until #
#                               the date given by <timestamp>             #
# The energy saving mechanism should be coupled with the mechanism to     #
# automatically set the nodes in the Alive state at boot time. Information#
# for that mechanism is provided on the following page:                   #
# https://oar.imag.fr/wiki:customization_tips#start_stop_of_nodes_using_ssh_keys
###############################################################################
#
# Parameter for the scheduler to decide when a node is idle.
# Number of seconds since the last job was terminated on nodes
#SCHEDULER_NODE_MANAGER_IDLE_TIME="600"
# Configuration for module: server

# Parameter for the scheduler to decide if a node will have enough time to sleep.
# Number of seconds before the next job
#SCHEDULER_NODE_MANAGER_SLEEP_TIME="600"
# Configuration for module: server

# Parameter for the scheduler to know when a node has to be woken up before the
# beginning of the job when a reservation is scheduled on a resource on this node
# Number of seconds for a node to wake up
#SCHEDULER_NODE_MANAGER_WAKEUP_TIME="600"
# Configuration for module: server

# When OAR scheduler wants some nodes to wake up then it launches this command
# and puts on its STDIN the list of nodes to wake up (one hostname by line).
# !! This variable is ignored if you set ENERGY_SAVING_INTERNAL to yes. !!
# The scheduler looks at the available_upto field in the resources table to know
# if the node will be started for enough time.
# There's no nodes management with this method: if you want nodes to be suspected
# when they do not wake up in time, then you have to use ENERGY_SAVING_INTERNAL=yes
# and set up ENERGY_SAVING_NODE_MANAGER_WAKE_UP_CMD.
#SCHEDULER_NODE_MANAGER_WAKE_UP_CMD="%%OARCONFDIR%%/wake_up_nodes.sh"
# Configuration for module: server

# When OAR considers that some nodes can be shut down, it launches this command
# and puts the node list on its STDIN (one hostname by line).
# !! This variable is ignored if you set ENERGY_SAVING_INTERNAL to yes. !!
# There's no nodes management with this method: if you want some nodes to be kept
# alive to be reactive to small jobs, then you have to use ENERGY_SAVING_INTERNAL=yes
# and set up ENERGY_SAVING_NODE_MANAGER_SLEEP_CMD.
#SCHEDULER_NODE_MANAGER_SLEEP_CMD="/path/to/the/command args"
#SCHEDULER_NODE_MANAGER_SLEEP_CMD="taktuk -s -f - -t 3 b e t 3 k 9 [ oardodo halt ]"
#SCHEDULER_NODE_MANAGER_SLEEP_CMD="%%OARDIR%%/sentinelle.pl -f - -t 3 -p 'oardodo halt'"
# Configuration for module: server

# Choose wether to use the internal energy saving module or not. If set to yes,
# please, also provide convenient configuration for all the ENERGY_* variables.
# If set to no, then you have to set up SCHEDULER_NODE_MANAGER_WAKE_UP_CMD
# and SCHEDULER_NODE_MANAGER_SLEEP_CMD
# Benefits of this module are:
# - nodes are suspected if they do not wake up before a timeout
# - some nodes can be kept always alive depending on some properties
# - the launching of wakeup/shutdown commands can be windowized to prevent
#   from electric peeks
# Possible values are "yes" and "no"
ENERGY_SAVING_INTERNAL="no"
# Configuration for module: server

# Path to the script used by the energy saving module to wake up nodes.
# This command is executed from the oar server host.
# OAR puts the node list on its STDIN (one hostname by line).
# The scheduler looks at the available_upto field in the resources table to know
# if the node will be started for enough time.
#ENERGY_SAVING_NODE_MANAGER_WAKE_UP_CMD="%%OARCONFDIR%%/wake_up_nodes.sh"
# Configuration for module: server

# Path to the script used by the energy saving module to shut down nodes.
# This command is executed from the oar server host.
# OAR puts the node list on its STDIN (one hostname by line).
#ENERGY_SAVING_NODE_MANAGER_SLEEP_CMD="%%OARCONFDIR%%/shut_down_nodes.sh"
# Configuration for module: server

# Timeout to consider a node broken (suspected) if it has not woken up
# The value can be an integer of seconds or a set of pairs.
# For example, "1:500 11:1000 21:2000" will produce a timeout of 500
# seconds if 1 to 10 nodes have to wakeup, 1000 seconds if 11 t 20 nodes
# have to wake up and 2000 seconds otherwise.
#ENERGY_SAVING_NODE_MANAGER_WAKEUP_TIMEOUT="900"
# Configuration for module: server

# You can set up a number of nodes that must always be on. You can use the
# syntax in the examples if you want a number of alive nodes of different types
# (corresponding to a specific sql properties requierement).
# Example 1: keep alive 10 nodes on the whole cluster:
#ENERGY_SAVING_NODES_KEEPALIVE="type='default':10"
# Example 2: keep alive 4 nodes on the paradent cluster AND 6 nodes on the
# paraquad cluster AND 2 nodes accepting besteffort
#ENERGY_SAVING_NODES_KEEPALIVE="cluster='paradent':4 & cluster='paraquad':6 & besteffort='YES':2"
# By default, keepalive is disabled:
#ENERGY_SAVING_NODES_KEEPALIVE="type='default':0"
# Configuration for module: server

# Parameter for the window launching mechanism embedded in OAR energy saving module
# to know the number of commands that can be executed in parallel.
# This mechanism is used in order to sleep and wake up nodes gradually.
# Window size minimum is 1
#ENERGY_SAVING_WINDOW_SIZE="25"
# Configuration for module: server

# Parameter to bypas the window mechanism embedded in the energy saving module.
# Possible values are "yes" and "no"
# When set to "yes", the list of nodes to wake up or shut down is passed to
# ENERGY_SAVING_NODE_MANAGER_*_CMD through stdin.
#ENERGY_SAVING_WINDOW_FORKER_BYPASS="no"
# Configuration for module: server

# Time in second between execution of each window.
# Minimum is 0 to set no delay between each window.
# This value must be smaller than ENERGY_SAVING_NODE_MANAGER_TIMEOUT.
#ENERGY_SAVING_WINDOW_TIME="60"
# Configuration for module: server

# Timeout to set the maximum duration for a execution window
# This value must be greater than ENERGY_SAVING_WINDOW_TIME.
#ENERGY_SAVING_WINDOW_TIMEOUT="120"
# Configuration for module: server

# The energy saving module can be automatically restarted after reaching
# this number of cycles. This is a workaround for some DBD modules that do
# not always free memory correctly.
#ENERGY_MAX_CYCLES_UNTIL_REFRESH=5000
# Configuration for module: server

################################################################################

##############################
# Suspend/Resume job feature #
###############################################################################
#
# Name of the perl script that manages suspend/resume.
# (default is %%OARCONFDIR%%/suspend_resume_manager.pl)
#SUSPEND_RESUME_FILE="%%OARCONFDIR%%/suspend_resume_manager.pl"
# Configuration for module: server

# Files to execute just after a job was suspended and just before a job was resumed
#JUST_AFTER_SUSPEND_EXEC_FILE="/path/to/prog"
#JUST_BEFORE_RESUME_EXEC_FILE="/path/to/prog"
# Configuration for module: server

# Timeout for the two previous scripts
#SUSPEND_RESUME_SCRIPT_TIMEOUT="60"
# Configuration for module: server

# To allow users to hold or resume their jobs. By default it's restricted to oar and
# root users due to global scheduling impact and possible priority bypassing.
#USERS_ALLOWED_HOLD_RESUME="yes"
# Configuration for module: server

###############################################################################

################################
# JOB_RESOURCE_MANAGER feature #
###############################################################################
# Specify the name of the database field that will be passed to the
# JOB_RESOURCE_MANAGER script.
# If this option is set then users must use oarsh instead of ssh to walk on
# the nodes they reserve using oarsub.
# Look at the CPUSET file
# (if defined, this option turn on the execution of JOB_RESOURCE_MANAGER script
# execution on each job nodes: initialize cpuset, job keys, clean nodes, ...)
JOB_RESOURCE_MANAGER_PROPERTY_DB_FIELD="cpuset"
# Configuration for module: server

# Name of the perl script that manages cpuset.
# (default is %%OARCONFDIR%%/job_resource_manager.pl which handles the linux kernel
# cpuset, job keys, clean processes, ...)
JOB_RESOURCE_MANAGER_FILE="%%OARCONFDIR%%/job_resource_manager_cgroups.pl"
# Configuration for module: server

# Path of the relative directory where the cpusets will be created on each
# nodes(same value than in /proc/self/cpuset).
# WARNING: Change this value only if you know what you are doing.
# (Note: comment this line to disable cpuset feature on computing nodes. Thus
# if you only want to initialize job user without the cpuset, you have
# to set OARSUB_FORCE_JOB_KEY="yes")
CPUSET_PATH="/oar"
# Configuration for module: server, user, api, node

# When HT is on, but thread resources are not defined in the resource
# hierarchy, nor the thread siblings defined in the cpuset resource field, let
# OAR automatically retrieve the thread siblings from the system information,
# and set them to the cpuset of the job at runtime.
# Default: "no", just set the cpuset value defined in the cpuset resource field.
# This must be set both in the server and nodes configuration files.
#COMPUTE_THREAD_SIBLINGS="no"
# Configuration for module: server, user, api, node

# Command to get a process cpuset
# If unset, OAR (oarsh) will read /proc/self/cpuset.
#GET_CURRENT_CPUSET_CMD="cat /proc/self/cpuset"
#GET_CURRENT_CPUSET_CMD="sed -e 's@^/oardocker/node[^/]\+\(/oar/[^/]\+\)/.\+@\1@' /proc/self/cpuset"
# Configuration for module: user, api, node

# Name of the perl script the retrieve monitoring data from compute nodes.
# This is used in oarmonitor command.
#OARMONITOR_SENSOR_FILE="%%OARCONFDIR%%/oarmonitor_sensor.pl"
# Configuration for module: server

###############################################################################

#########
# OARSH #
###############################################################################
#
# The following variable must be set to enable the use of oarsh on frontend
# machines. On other machines (compute nodes), it does not need to be set.
OARSH_OARSTAT_CMD="%%BINDIR%%/oarstat"
# Configuration for module: user, api

# The following variable gives the OpenSSH options which the oarsh command must
# understand in order to parse user commands.
# The value of OPENSSH_OPTSTR must match the option string of OpenSSH ssh
# command installed on the system (mind checking it is up-to-date, as OpenSSH 
# development is very active), which can be found in the ssh.c file of the 
# OpenSSH sources. For instance, the following command extracts the option
# string of OpenSSH 7.2p2 :
#
# $ cd path/to/openssh/sources/ 
# $ grep getopt -A1 ssh.c | sed 's/.*"\(.\+\)".*/\1/' | xargs | sed 's/ //g'
# 1246ab:c:e:fgi:kl:m:no:p:qstvxACD:E:F:GI:J:KL:MNO:PQ:R:S:TVw:W:XYy
OPENSSH_OPTSTR="1246ab:c:e:fgi:kl:m:no:p:qstvxAB:CD:E:F:GI:J:KL:MNO:PQ:R:S:TVw:W:XYy"
# Configuration for module: server, user, api, node

# The following variable sets the OpenSSH options which oarsh actually uses.
# Any option which is filtered out from the OPENSSH_OPTSTR variable above is 
# just ignored (see oarsh -v for debug)
# WARNING: if not fitlered out, some options may allow root exploit using oarsh.
# At least the following OpenSSH options are recommanded to be fitlered out: 
#  -a -A -i -l -o -p -E -F -G -I -w
OPENSSH_OPTSTR_FILTERED="1246b:c:fm:nqstvxBCNPQ:TVXYy"
# Configuration for module: server, user, api, node

# The following variable forces OpenSSH configuration options for the ssh call 
# made by in oarsh, so that, for security reasons, they cannot be set by the
# user (whenever "o:" is not filtered out in the OPENSSH_OPTSTR_FILTERED
# variable above).
# WARNING: for security, do not change unless you know what you are doing
OARSH_OPENSSH_DEFAULT_OPTIONS="-e none -oProxyCommand=none -oPermitLocalCommand=no -oUserKnownHostsFile=%%OARHOMEDIR%%/.ssh/known_hosts"
# Configuration for module: server, user, api, node

# If the following variable is set to a value which is not 0, oarsh will act
# like a normal ssh, **without** the CPUSET isolation mechanism.
# WARNING: this disable a critical functionality
# This can however be useful and different from simply using ssh, as it
# provides users with a mechanism which allows to connect to compute nodes
# without having to care of their ssh configuration (e.g. key setup)
#OARSH_BYPASS_WHOLE_SECURITY="0"
# Configuration for module: user, api, node

#########
# OARSTAT #
###############################################################################

# Default oarstat output format.
# See oarstat "--format" option to know the available values
# (default is 1)
OARSTAT_DEFAULT_OUTPUT_FORMAT=2
# Configuration for module: user, api

# Set the behavior of oarstat regarding the "initial_request" field.
# By default, users only see the "initial_request" info for their jobs.
# This option changes this to let any user see the "initial_request" of any job.
# Please note that even when set to "no", any user connecting to the OAR database
# using the read only role and can see the initial_request field for any job.
#OARSTAT_SHOW_OTHER_USERS_INITIAL_REQUEST="no"
# Configuration for module: user, api


###########
# OAR API #
###############################################################################

# Disable this if you are not ok with a simple pidentd "authentication"
# It is safe enough if you fully trust the client hosts (with an apropriate
# ip-based access control into apache for example)
#API_TRUST_IDENT="1"
# Configuration for module: api

# Custom header for the html browsable format of the API
#API_HTML_HEADER="%%OARCONFDIR%%/api_html_header.pl"
# Configuration for module: api

# Custom form for posting jobs with html to the API
#API_HTML_FORM="%%OARCONFDIR%%/api_html_postform.pl"
# Configuration for module: api

# Default data structure variant
# Value can be "oar" or "simple" (the default is "simple")
# This can be override with the "?structure=<value>" part of the queries
# The "oar" variant tries to be as near as possible to the data structures
# used by the export options of the oarstat/oarnodes commands.
# The "simple" variant aims to be more simple, using arrays instead of hashes
# when it is possible.
# The first is more human readable; the second is simpler for programming.
#API_DEFAULT_DATA_STRUCTURE="simple"
# Configuration for module: api

# Maximum default number of items
#API_DEFAULT_MAX_ITEMS_NUMBER=500
# Configuration for module: api

# Default parameters for the /jobs uri
# if a "&limit=" is given, the API_DEFAULT_MAX_ITEMS_NUMBER is ignored for this uri
#API_JOBS_URI_DEFAULT_PARAMS="state=Finishing,Running,Resuming,Suspended,Launching,toLaunch,Waiting,toAckReservation,Hold"
# Configuration for module: api

# Set to 0 if you want the API to provide relative uris.
# Relative uris may help if your API is behind a reverse proxy,
# as you don't have to rewrite the uris, but due to the possible confusion
# between "resources" and "resources/", it may not work with some libraries
# like "ruby Restfully".
# In addition, you can use the X_API_PATH_PREFIX http header variable to prepend each uris
# returned by the API by a given prefix. (for example: curl -i -H'X_API_PATH_PREFIX: http://prefix_a/la/noix/' ...)
#API_ABSOLUTE_URIS=1
# Configuration for module: api

# Api stress_factor script
# This script should return at least a real value between 0 and 1 that is given by
# the OAR api for the "GET /stress_factor" URI.
# Warning: this script is run by root and the output is parsed as a list of
# variables as is!
# - A stress_factor of 0 means that everything is fine
# - A stress_factor of 1 (or more) means that the resources manager is under
# stress. That generally means that it doesn't want to manage anymore jobs!
# - Any value between 0 and 1 is allowed to define the level of stress.
# It allows the administrator to define custom criterias to tell other systems
# (those using the API) that they maybe should reduce or stop to query this
# OAR system for a while. So, this script is meant to be polled regularly.
# The script should return at least the variable "GLOBAL_STRESS=" but it
# may also provide other custom defined values.
#API_STRESS_FACTOR_SCRIPT="/etc/oar/stress_factor.sh"
# Configuration for module: api

# Command to generate a yaml list of resources to be created from
# a resources definition syntax submitted to the OAR API
# (POST /resources/generate)
# If the variable is not defined, this feature is disabled
#API_RESOURCES_LIST_GENERATION_CMD="/usr/sbin/oar_resources_add -Y"
# Configuration for module: api

# Colmet extractor script path
#API_COLMET_EXTRACT_PATH="/usr/lib/oar/colmet_extract.py"
# Configuration for module: api

# Colmet hdf5 files path with filename prefix
# The API will automatically append .<timestamp>.hdf5
#API_COLMET_HDF5_PATH_PREFIX="/var/lib/colmet/hdf5/cluster"
# Configuration for module: api
